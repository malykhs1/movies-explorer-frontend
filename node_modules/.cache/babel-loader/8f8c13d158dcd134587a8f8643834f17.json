{"ast":null,"code":"//блок catch должен быть не в апи, а в индексе при вызове метода. \nclass Api {\n  constructor(config) {\n    this._url = config.url;\n    this._headers = config.headers;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка ${res.status}`);\n  } //подгружаем данные пользователя с сервера\n\n\n  getUserInfo(token) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  } //обновляем данные пользователя\n\n\n  setUserInfo(name, email, token) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: name,\n        email: email\n      })\n    }).then(this._checkResponse);\n  }\n\n  addNewCard(movie, token) {\n    return fetch(`${this._url}/movies`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(movie)\n    }).then(this._checkResponse);\n  }\n\n  removeNewCard(movieId, token) {\n    return fetch(`${this._url}/movies/${movieId}`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  } //получаем залайканные фильмы с сервера?\n\n\n  getLikeMovies(token) {\n    return fetch(`${this._url}/movies`, {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n\n}\n\nexport const api = new Api({\n  url: 'https://api.malykhs-diplom.nomoredomains.rocks'\n});","map":{"version":3,"sources":["/Users/aleksandrmalyh/dev/movies-explorer-frontend/src/utils/api.js"],"names":["Api","constructor","config","_url","url","_headers","headers","_checkResponse","res","ok","json","Promise","reject","status","getUserInfo","token","fetch","method","then","setUserInfo","name","email","body","JSON","stringify","addNewCard","movie","removeNewCard","movieId","getLikeMovies","api"],"mappings":"AAAA;AACA,MAAMA,GAAN,CAAU;AACNC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKC,IAAL,GAAYD,MAAM,CAACE,GAAnB;AACA,SAAKC,QAAL,GAAgBH,MAAM,CAACI,OAAvB;AACH;;AAEDC,EAAAA,cAAc,CAACC,GAAD,EAAM;AAChB,QAAIA,GAAG,CAACC,EAAR,EAAY;AACR,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAgB,UAASJ,GAAG,CAACK,MAAO,EAApC,CAAP;AACH,GAXK,CAaN;;;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,WAAOC,KAAK,CAAE,GAAE,KAAKb,IAAK,WAAd,EAA0B;AAClCc,MAAAA,MAAM,EAAE,KAD0B;AAElCX,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,yBAAkB,UAASS,KAAM;AAF5B;AAFyB,KAA1B,CAAL,CAOFG,IAPE,CAOG,KAAKX,cAPR,CAAP;AAQH,GAvBK,CAyBN;;;AACAY,EAAAA,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAcN,KAAd,EAAqB;AAC5B,WAAOC,KAAK,CAAE,GAAE,KAAKb,IAAK,WAAd,EAA0B;AAClCc,MAAAA,MAAM,EAAE,OAD0B;AAElCX,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,yBAAkB,UAASS,KAAM;AAF5B,OAFyB;AAMlCO,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBJ,QAAAA,IAAI,EAAEA,IADW;AAEjBC,QAAAA,KAAK,EAAEA;AAFU,OAAf;AAN4B,KAA1B,CAAL,CAWFH,IAXE,CAWG,KAAKX,cAXR,CAAP;AAYH;;AAGDkB,EAAAA,UAAU,CAACC,KAAD,EAAQX,KAAR,EAAe;AACrB,WAAOC,KAAK,CAAE,GAAE,KAAKb,IAAK,SAAd,EAAwB;AAChCc,MAAAA,MAAM,EAAE,MADwB;AAEhCX,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,yBAAkB,UAASS,KAAM;AAF5B,OAFuB;AAMhCO,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeE,KAAf;AAN0B,KAAxB,CAAL,CAQFR,IARE,CAQG,KAAKX,cARR,CAAP;AASH;;AAEDoB,EAAAA,aAAa,CAACC,OAAD,EAAUb,KAAV,EAAiB;AAC1B,WAAOC,KAAK,CAAE,GAAE,KAAKb,IAAK,WAAUyB,OAAQ,EAAhC,EAAmC;AAC3CX,MAAAA,MAAM,EAAE,QADmC;AAE3CX,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,yBAAkB,UAASS,KAAM;AAF5B;AAFkC,KAAnC,CAAL,CAOFG,IAPE,CAOG,KAAKX,cAPR,CAAP;AAQH,GA/DK,CAiEN;;;AACAsB,EAAAA,aAAa,CAACd,KAAD,EAAQ;AACjB,WAAOC,KAAK,CAAE,GAAE,KAAKb,IAAK,SAAd,EAAwB;AAChCc,MAAAA,MAAM,EAAE,KADwB;AAEhCX,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,yBAAkB,UAASS,KAAM;AAF5B;AAFuB,KAAxB,CAAL,CAOFG,IAPE,CAOG,KAAKX,cAPR,CAAP;AAQH;;AA3EK;;AA8EV,OAAO,MAAMuB,GAAG,GAAG,IAAI9B,GAAJ,CAAQ;AACvBI,EAAAA,GAAG,EAAE;AADkB,CAAR,CAAZ","sourcesContent":["//блок catch должен быть не в апи, а в индексе при вызове метода. \nclass Api {\n    constructor(config) {\n        this._url = config.url;\n        this._headers = config.headers;\n    }\n\n    _checkResponse(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка ${res.status}`);\n    }\n\n    //подгружаем данные пользователя с сервера\n    getUserInfo(token) {\n        return fetch(`${this._url}/users/me`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'authorization': `Bearer ${token}`,\n            },\n        })\n            .then(this._checkResponse);\n    }\n\n    //обновляем данные пользователя\n    setUserInfo(name, email, token) {\n        return fetch(`${this._url}/users/me`, {\n            method: 'PATCH',\n            headers: {\n                'Content-Type': 'application/json',\n                'authorization': `Bearer ${token}`,\n            },\n            body: JSON.stringify({\n                name: name,\n                email: email\n            })\n        })\n            .then(this._checkResponse);\n    }\n\n\n    addNewCard(movie, token) {\n        return fetch(`${this._url}/movies`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'authorization': `Bearer ${token}`,\n            },\n            body: JSON.stringify(movie)\n        })\n            .then(this._checkResponse);\n    }\n\n    removeNewCard(movieId, token) {\n        return fetch(`${this._url}/movies/${movieId}`, {\n            method: \"DELETE\",\n            headers: {\n                'Content-Type': 'application/json',\n                'authorization': `Bearer ${token}`,\n            },\n        })\n            .then(this._checkResponse);\n    }\n\n    //получаем залайканные фильмы с сервера?\n    getLikeMovies(token) {\n        return fetch(`${this._url}/movies`, {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n                'authorization': `Bearer ${token}`,\n            },\n        })\n            .then(this._checkResponse);\n    }\n}\n\nexport const api = new Api({\n    url: 'https://api.malykhs-diplom.nomoredomains.rocks',\n});\n"]},"metadata":{},"sourceType":"module"}