{"ast":null,"code":"var _jsxFileName = \"/Users/aleksandrmalyh/dev/movies-explorer-frontend/src/components/Movies/Movies.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Header } from \"../Header/Header\";\nimport { SearchForm } from \"../SearchForm/SearchForm\";\nimport { Navigation } from \"../Navigation/Navigation\";\nimport { MoviesCardList } from \"../MoviesCardList/MoviesCadList\";\nimport { Footer } from \"../Footer/Footer\";\nimport { apiFilm } from \"../../utils/MoviesApi\";\nimport { api } from \"../../utils/api\";\nimport { Preloader } from \"../Preloader/Loader\";\nimport { InfoToolTip } from \"../Popup/Popup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Movies = () => {\n  _s();\n\n  const imageURL = 'https://api.nomoreparties.co'; //all films from server\n\n  const [films, setFilms] = useState(null); //фильмы, которые мы будем отображать!\n\n  const [filmsShowed, setFilmsShowed] = useState(null); //залайканные фильмы\n\n  const [filmsSaved, setFilmsSaved] = useState(null); //устанавливаем кол-вол карточек для отображения\n\n  const [visible, setVisible] = useState(10); //прелоадер\n\n  const [preloader, setPreloader] = useState(false);\n  const [filmsTumbler, setFilmsTumbler] = useState(false);\n  const [filmsInputSearch, setFilmsInputSearch] = useState(''); //покажем юзеру ошибку, если не смогли лайкнуть карточку\n\n  const [isSuccseed, setSuccseed] = useState(true);\n  const [isInfoToolTipOpened, setIsInfoToolTipOpened] = useState(false);\n\n  const closeAllPopups = () => {\n    setIsInfoToolTipOpened(false);\n  };\n\n  async function handleGetMovies(inputSearch, tumbler) {\n    // localStorage.setItem('filmsTumbler', false);\n    setPreloader(true);\n\n    try {\n      const token = localStorage.getItem('token');\n      const data = await apiFilm.getFilmInfo(token);\n      let filterData = data.filter(_ref => {\n        let {\n          nameRU\n        } = _ref;\n        return nameRU.toLowerCase().includes(inputSearch.toLowerCase());\n      });\n\n      if (tumbler === true) {\n        localStorage.setItem('films', JSON.stringify(filterData));\n        localStorage.setItem('filmsInputSearch', inputSearch);\n        const shortFilms = filterData.filter(_ref2 => {\n          let {\n            duration\n          } = _ref2;\n          return duration <= 40;\n        });\n        setFilmsShowed(shortFilms);\n        const spliceData = shortFilms.splice(0, visible);\n        localStorage.setItem('savedResults', JSON.stringify(filterData.concat(spliceData.splice(0, visible))));\n        setFilmsShowed(spliceData);\n        setFilms(spliceData);\n      } else {\n        localStorage.setItem('films', JSON.stringify(filterData));\n        localStorage.setItem('filmsInputSearch', inputSearch);\n        const spliceData = filterData.splice(0, visible);\n        localStorage.setItem('savedResults', JSON.stringify(filterData.concat(spliceData.splice(0, visible))));\n        setFilmsShowed(spliceData);\n        setFilms(filterData);\n      }\n    } catch (err) {\n      setFilms([]);\n      localStorage.removeItem('films');\n      localStorage.removeItem('filmsTumbler');\n      localStorage.removeItem('filmsInputSearch');\n    } finally {\n      setPreloader(false);\n    }\n  }\n\n  async function handleGetMoviesTumbler(keyword, tumbler) {\n    let filterDataShowed = [];\n    let filterData = [];\n    handleGetMovies(keyword, tumbler);\n    localStorage.setItem('films', JSON.stringify(filterDataShowed.concat(filterData)));\n    localStorage.setItem('filmsTumbler', tumbler);\n    setFilmsShowed(filterDataShowed);\n    setFilms(filterData);\n  } // добавляем количество фильмов при нажатии на кнопку\n\n\n  const handleMore = () => {\n    const newFilmsShowed = filmsShowed.concat(films.splice(0, visible));\n    setFilmsShowed(newFilmsShowed);\n  };\n\n  async function savedMoviesToggle(movie, fav) {\n    if (fav) {\n      const token = localStorage.getItem('token');\n      const savedMovie = {\n        country: movie.country || 'none',\n        director: movie.director || 'none',\n        duration: movie.duration,\n        year: movie.year,\n        description: movie.description || 'none',\n        nameRU: movie.nameRU,\n        nameEN: movie.nameEN,\n        image: `${imageURL}${movie.image.url}` || 'https://www.youtube.com/',\n        trailer: movie.trailerLink || 'https://www.youtube.com',\n        thumbnail: `${imageURL}${movie.image.url}` || 'https://www.youtube.com/',\n        movieId: movie.id\n      };\n\n      try {\n        await api.addNewCard(savedMovie, token);\n        const newSaved = await api.getLikeMovies(token);\n        setFilmsSaved(newSaved);\n      } catch (error) {\n        console.log(error);\n        setSuccseed(false);\n        setIsInfoToolTipOpened(true);\n      }\n    } else {\n      try {\n        const token = localStorage.getItem('token');\n        await api.removeNewCard(movie._id, token);\n        const newSaved = await api.getLikeMovies(token);\n        setFilmsSaved(newSaved);\n      } catch (error) {\n        console.log(error);\n        setSuccseed(false);\n        setIsInfoToolTipOpened(true);\n      }\n    }\n  } //монтируем \n\n\n  useEffect(() => {\n    //фильмы с сервака\n    const token = localStorage.getItem('token');\n    api.getLikeMovies(token).then(data => {\n      setFilmsSaved(data);\n    }).catch(err => console.log(err));\n    const localStorageFilms = localStorage.getItem('savedResults');\n\n    if (localStorageFilms) {\n      const filterData = JSON.parse(localStorageFilms);\n      console.log(filterData);\n      setFilmsShowed(filterData);\n      setFilms(filterData);\n      setPreloader(false);\n    }\n\n    const localStorageFilmsInputSearch = localStorage.getItem('filmsInputSearch');\n    const localStorageFilmsTumbler = localStorage.getItem('filmsTumbler');\n\n    if (localStorageFilmsTumbler) {\n      setFilmsTumbler(localStorageFilmsTumbler === 'true');\n    }\n\n    if (localStorageFilmsInputSearch) {\n      setFilmsInputSearch(localStorageFilmsInputSearch);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      handleGetMovies: handleGetMovies,\n      filmsTumbler: filmsTumbler,\n      filmsInputSearch: filmsInputSearch,\n      handleGetMoviesTumbler: handleGetMoviesTumbler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), preloader && /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 21\n    }, this), !preloader && films !== null && filmsSaved !== null && filmsShowed !== null && /*#__PURE__*/_jsxDEV(MoviesCardList, {\n      handleMore: handleMore,\n      filmsRemains: films,\n      films: filmsShowed,\n      savedMoviesToggle: savedMoviesToggle,\n      filmsSaved: filmsSaved\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoToolTip, {\n      id: \"reg-pic\",\n      isOpened: isInfoToolTipOpened,\n      onClose: closeAllPopups,\n      isSuccseed: isSuccseed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Movies, \"8fCsjz4COqpryrX7jPW9ebwVyRA=\");\n\n_c = Movies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/Users/aleksandrmalyh/dev/movies-explorer-frontend/src/components/Movies/Movies.js"],"names":["React","useEffect","useState","Header","SearchForm","Navigation","MoviesCardList","Footer","apiFilm","api","Preloader","InfoToolTip","Movies","imageURL","films","setFilms","filmsShowed","setFilmsShowed","filmsSaved","setFilmsSaved","visible","setVisible","preloader","setPreloader","filmsTumbler","setFilmsTumbler","filmsInputSearch","setFilmsInputSearch","isSuccseed","setSuccseed","isInfoToolTipOpened","setIsInfoToolTipOpened","closeAllPopups","handleGetMovies","inputSearch","tumbler","token","localStorage","getItem","data","getFilmInfo","filterData","filter","nameRU","toLowerCase","includes","setItem","JSON","stringify","shortFilms","duration","spliceData","splice","concat","err","removeItem","handleGetMoviesTumbler","keyword","filterDataShowed","handleMore","newFilmsShowed","savedMoviesToggle","movie","fav","savedMovie","country","director","year","description","nameEN","image","url","trailer","trailerLink","thumbnail","movieId","id","addNewCard","newSaved","getLikeMovies","error","console","log","removeNewCard","_id","then","catch","localStorageFilms","parse","localStorageFilmsInputSearch","localStorageFilmsTumbler"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Header } from \"../Header/Header\";\nimport { SearchForm } from \"../SearchForm/SearchForm\";\nimport { Navigation } from \"../Navigation/Navigation\";\nimport { MoviesCardList } from \"../MoviesCardList/MoviesCadList\";\nimport { Footer } from \"../Footer/Footer\";\nimport { apiFilm } from \"../../utils/MoviesApi\";\nimport { api } from \"../../utils/api\";\nimport { Preloader } from \"../Preloader/Loader\";\nimport { InfoToolTip } from \"../Popup/Popup\";\n\nexport const Movies = () => {\n\n  const imageURL = 'https://api.nomoreparties.co';\n\n  //all films from server\n  const [films, setFilms] = useState(null)\n  //фильмы, которые мы будем отображать!\n  const [filmsShowed, setFilmsShowed] = useState(null);\n  //залайканные фильмы\n  const [filmsSaved, setFilmsSaved] = useState(null);\n\n  //устанавливаем кол-вол карточек для отображения\n  const [visible, setVisible] = useState(10);\n\n  //прелоадер\n  const [preloader, setPreloader] = useState(false);\n\n\n  const [filmsTumbler, setFilmsTumbler] = useState(false);\n  const [filmsInputSearch, setFilmsInputSearch] = useState('');\n\n  //покажем юзеру ошибку, если не смогли лайкнуть карточку\n  const [isSuccseed, setSuccseed] = useState(true);\n  const [isInfoToolTipOpened, setIsInfoToolTipOpened] = useState(false);\n\n  const closeAllPopups = () => {\n    setIsInfoToolTipOpened(false);\n  };\n\n\n  async function handleGetMovies(inputSearch, tumbler) {\n    // localStorage.setItem('filmsTumbler', false);\n    setPreloader(true);\n    try {\n      const token = localStorage.getItem('token')\n      const data = await apiFilm.getFilmInfo(token);\n      let filterData = data.filter(({ nameRU }) => nameRU.toLowerCase().includes(inputSearch.toLowerCase()));\n      if (tumbler === true) {\n        localStorage.setItem('films', JSON.stringify(filterData)); \n        localStorage.setItem('filmsInputSearch', inputSearch); \n        const shortFilms = filterData.filter(({ duration }) => duration <= 40);\n        setFilmsShowed(shortFilms);\n        const spliceData = shortFilms.splice(0, visible);\n        localStorage.setItem('savedResults',JSON.stringify(filterData.concat(spliceData.splice(0, visible)))); \n        setFilmsShowed(spliceData);\n        setFilms(spliceData);\n       \n      }\n      else {\n        localStorage.setItem('films', JSON.stringify(filterData)); \n        localStorage.setItem('filmsInputSearch', inputSearch);\n        const spliceData = filterData.splice(0, visible);\n        localStorage.setItem('savedResults',JSON.stringify(filterData.concat(spliceData.splice(0, visible)))); \n        setFilmsShowed(spliceData);\n        setFilms(filterData);\n\n      }\n    } catch (err) {\n      setFilms([]);\n      localStorage.removeItem('films');\n      localStorage.removeItem('filmsTumbler');\n      localStorage.removeItem('filmsInputSearch');\n    } finally {\n      setPreloader(false)\n    }\n  }\n\n\n  async function handleGetMoviesTumbler(keyword, tumbler) {\n    let filterDataShowed = [];\n    let filterData = [];\n    handleGetMovies(keyword, tumbler)\n\n    localStorage.setItem('films', JSON.stringify(filterDataShowed.concat(filterData)));\n    localStorage.setItem('filmsTumbler', tumbler); \n\n    setFilmsShowed(filterDataShowed);\n    setFilms(filterData)\n  }\n\n  // добавляем количество фильмов при нажатии на кнопку\n  const handleMore = () => {\n    const newFilmsShowed = filmsShowed.concat(films.splice(0, visible));\n    setFilmsShowed(newFilmsShowed);\n  }\n\n  async function savedMoviesToggle(movie, fav) {\n    if (fav) {\n      const token = localStorage.getItem('token')\n      const savedMovie = {\n        country: movie.country || 'none',\n        director: movie.director || 'none',\n        duration: movie.duration,\n        year: movie.year,\n        description: movie.description || 'none',\n        nameRU: movie.nameRU,\n        nameEN: movie.nameEN,\n        image: `${imageURL}${movie.image.url}` || 'https://www.youtube.com/',\n        trailer: movie.trailerLink || 'https://www.youtube.com',\n        thumbnail: `${imageURL}${movie.image.url}` || 'https://www.youtube.com/',\n        movieId: movie.id,\n      }\n      try {\n        await api.addNewCard(savedMovie, token);\n        const newSaved = await api.getLikeMovies(token);\n        setFilmsSaved(newSaved);\n      } catch (error) {\n        console.log(error);\n        setSuccseed(false)\n        setIsInfoToolTipOpened(true);\n      }\n    } else {\n      try {\n        const token = localStorage.getItem('token')\n        await api.removeNewCard(movie._id, token);\n        const newSaved = await api.getLikeMovies(token);\n        setFilmsSaved(newSaved);\n      } catch (error) {\n        console.log(error);\n        setSuccseed(false)\n        setIsInfoToolTipOpened(true);\n      }\n    }\n  }\n\n  //монтируем \n  useEffect(() => {\n    //фильмы с сервака\n    const token = localStorage.getItem('token');\n    api.getLikeMovies(token)\n      .then((data) => {\n        setFilmsSaved(data);\n      })\n      .catch((err) => console.log(err));\n\n    const localStorageFilms = localStorage.getItem('savedResults');\n\n    if (localStorageFilms) {\n      const filterData = JSON.parse(localStorageFilms);\n      console.log(filterData);\n      setFilmsShowed(filterData);\n      setFilms(filterData);\n      setPreloader(false)\n    }\n    const localStorageFilmsInputSearch = localStorage.getItem('filmsInputSearch');\n    const localStorageFilmsTumbler = localStorage.getItem('filmsTumbler');  \n    if (localStorageFilmsTumbler) {\n      setFilmsTumbler(localStorageFilmsTumbler === 'true');\n     }    \n    if (localStorageFilmsInputSearch) {\n      setFilmsInputSearch(localStorageFilmsInputSearch);\n    }    \n  }, []);\n\n  return (\n    <>\n      <Header />\n      <Navigation />\n      <SearchForm\n        handleGetMovies={handleGetMovies}\n        filmsTumbler={filmsTumbler}\n        filmsInputSearch={filmsInputSearch}\n        handleGetMoviesTumbler={handleGetMoviesTumbler}\n      />\n      {preloader && <Preloader />}\n\n      {!preloader && films !== null && filmsSaved !== null && filmsShowed !== null &&\n\n        <MoviesCardList\n          handleMore={handleMore}\n          filmsRemains={films}\n          films={filmsShowed}\n          savedMoviesToggle={savedMoviesToggle}\n          filmsSaved={filmsSaved}\n        />\n      }\n      <Footer />\n\n      <InfoToolTip\n            id=\"reg-pic\"\n            isOpened={isInfoToolTipOpened}\n            onClose={closeAllPopups}\n            isSuccseed={isSuccseed}\n          />\n    </>\n  );\n};"]},"metadata":{},"sourceType":"module"}