{"ast":null,"code":"import _classCallCheck from\"/Users/aleksandrmalyh/dev/movies-explorer-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/aleksandrmalyh/dev/movies-explorer-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";//блок catch должен быть не в апи, а в индексе при вызове метода. \nvar Api=/*#__PURE__*/function(){function Api(config){_classCallCheck(this,Api);this._url=config.url;this._headers=config.headers;}_createClass(Api,[{key:\"_checkResponse\",value:function _checkResponse(res){if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \".concat(res.status));}//подгружаем данные пользователя с сервера\n},{key:\"getUserInfo\",value:function getUserInfo(token){return fetch(\"\".concat(this._url,\"/users/me\"),{method:'GET',headers:{'Content-Type':'application/json','authorization':\"Bearer \".concat(token)}}).then(this._checkResponse);}//обновляем данные пользователя\n},{key:\"setUserInfo\",value:function setUserInfo(name,email,token){return fetch(\"\".concat(this._url,\"/users/me\"),{method:'PATCH',headers:{'Content-Type':'application/json','authorization':\"Bearer \".concat(token)},body:JSON.stringify({name:name,email:email})}).then(this._checkResponse);}},{key:\"addNewCard\",value:function addNewCard(movie,token){return fetch(\"\".concat(this._url,\"/movies\"),{method:\"POST\",headers:{'Content-Type':'application/json','authorization':\"Bearer \".concat(token)},body:JSON.stringify(movie)}).then(this._checkResponse);}},{key:\"removeNewCard\",value:function removeNewCard(movieId,token){return fetch(\"\".concat(this._url,\"/movies/\").concat(movieId),{method:\"DELETE\",headers:{'Content-Type':'application/json','authorization':\"Bearer \".concat(token)}}).then(this._checkResponse);}//получаем залайканные фильмы с сервера?\n},{key:\"getLikeMovies\",value:function getLikeMovies(token){return fetch(\"\".concat(this._url,\"/movies\"),{method:\"GET\",headers:{'Content-Type':'application/json','authorization':\"Bearer \".concat(token)}}).then(this._checkResponse);}}]);return Api;}();export var api=new Api({url:'https://api.malykhs-diplom.nomoredomains.rocks'});","map":{"version":3,"sources":["/Users/aleksandrmalyh/dev/movies-explorer-frontend/src/utils/api.js"],"names":["Api","config","_url","url","_headers","headers","res","ok","json","Promise","reject","status","token","fetch","method","then","_checkResponse","name","email","body","JSON","stringify","movie","movieId","api"],"mappings":"8QAAA;GACMA,CAAAA,G,yBACF,aAAYC,MAAZ,CAAoB,2BAChB,KAAKC,IAAL,CAAYD,MAAM,CAACE,GAAnB,CACA,KAAKC,QAAL,CAAgBH,MAAM,CAACI,OAAvB,CACH,C,8CAED,wBAAeC,GAAf,CAAoB,CAChB,GAAIA,GAAG,CAACC,EAAR,CAAY,CACR,MAAOD,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACH,CACD,MAAOC,CAAAA,OAAO,CAACC,MAAR,gDAAyBJ,GAAG,CAACK,MAA7B,EAAP,CACH,CAED;2BACA,qBAAYC,KAAZ,CAAmB,CACf,MAAOC,CAAAA,KAAK,WAAI,KAAKX,IAAT,cAA0B,CAClCY,MAAM,CAAE,KAD0B,CAElCT,OAAO,CAAE,CACL,eAAgB,kBADX,CAEL,iCAA2BO,KAA3B,CAFK,CAFyB,CAA1B,CAAL,CAOFG,IAPE,CAOG,KAAKC,cAPR,CAAP,CAQH,CAED;2BACA,qBAAYC,IAAZ,CAAkBC,KAAlB,CAAyBN,KAAzB,CAAgC,CAC5B,MAAOC,CAAAA,KAAK,WAAI,KAAKX,IAAT,cAA0B,CAClCY,MAAM,CAAE,OAD0B,CAElCT,OAAO,CAAE,CACL,eAAgB,kBADX,CAEL,iCAA2BO,KAA3B,CAFK,CAFyB,CAMlCO,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACjBJ,IAAI,CAAEA,IADW,CAEjBC,KAAK,CAAEA,KAFU,CAAf,CAN4B,CAA1B,CAAL,CAWFH,IAXE,CAWG,KAAKC,cAXR,CAAP,CAYH,C,0BAGD,oBAAWM,KAAX,CAAkBV,KAAlB,CAAyB,CACrB,MAAOC,CAAAA,KAAK,WAAI,KAAKX,IAAT,YAAwB,CAChCY,MAAM,CAAE,MADwB,CAEhCT,OAAO,CAAE,CACL,eAAgB,kBADX,CAEL,iCAA2BO,KAA3B,CAFK,CAFuB,CAMhCO,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeC,KAAf,CAN0B,CAAxB,CAAL,CAQFP,IARE,CAQG,KAAKC,cARR,CAAP,CASH,C,6BAED,uBAAcO,OAAd,CAAuBX,KAAvB,CAA8B,CAC1B,MAAOC,CAAAA,KAAK,WAAI,KAAKX,IAAT,oBAAwBqB,OAAxB,EAAmC,CAC3CT,MAAM,CAAE,QADmC,CAE3CT,OAAO,CAAE,CACL,eAAgB,kBADX,CAEL,iCAA2BO,KAA3B,CAFK,CAFkC,CAAnC,CAAL,CAOFG,IAPE,CAOG,KAAKC,cAPR,CAAP,CAQH,CAED;6BACA,uBAAcJ,KAAd,CAAqB,CACjB,MAAOC,CAAAA,KAAK,WAAI,KAAKX,IAAT,YAAwB,CAChCY,MAAM,CAAE,KADwB,CAEhCT,OAAO,CAAE,CACL,eAAgB,kBADX,CAEL,iCAA2BO,KAA3B,CAFK,CAFuB,CAAxB,CAAL,CAOFG,IAPE,CAOG,KAAKC,cAPR,CAAP,CAQH,C,mBAGL,MAAO,IAAMQ,CAAAA,GAAG,CAAG,GAAIxB,CAAAA,GAAJ,CAAQ,CACvBG,GAAG,CAAE,gDADkB,CAAR,CAAZ","sourcesContent":["//блок catch должен быть не в апи, а в индексе при вызове метода. \nclass Api {\n    constructor(config) {\n        this._url = config.url;\n        this._headers = config.headers;\n    }\n\n    _checkResponse(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка ${res.status}`);\n    }\n\n    //подгружаем данные пользователя с сервера\n    getUserInfo(token) {\n        return fetch(`${this._url}/users/me`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'authorization': `Bearer ${token}`,\n            },\n        })\n            .then(this._checkResponse);\n    }\n\n    //обновляем данные пользователя\n    setUserInfo(name, email, token) {\n        return fetch(`${this._url}/users/me`, {\n            method: 'PATCH',\n            headers: {\n                'Content-Type': 'application/json',\n                'authorization': `Bearer ${token}`,\n            },\n            body: JSON.stringify({\n                name: name,\n                email: email\n            })\n        })\n            .then(this._checkResponse);\n    }\n\n\n    addNewCard(movie, token) {\n        return fetch(`${this._url}/movies`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'authorization': `Bearer ${token}`,\n            },\n            body: JSON.stringify(movie)\n        })\n            .then(this._checkResponse);\n    }\n\n    removeNewCard(movieId, token) {\n        return fetch(`${this._url}/movies/${movieId}`, {\n            method: \"DELETE\",\n            headers: {\n                'Content-Type': 'application/json',\n                'authorization': `Bearer ${token}`,\n            },\n        })\n            .then(this._checkResponse);\n    }\n\n    //получаем залайканные фильмы с сервера?\n    getLikeMovies(token) {\n        return fetch(`${this._url}/movies`, {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n                'authorization': `Bearer ${token}`,\n            },\n        })\n            .then(this._checkResponse);\n    }\n}\n\nexport const api = new Api({\n    url: 'https://api.malykhs-diplom.nomoredomains.rocks',\n});\n"]},"metadata":{},"sourceType":"module"}